WHY SPRING SECURITY
Spring Security is an application framework that provides application level security
That means
	• Provide login and logout functionality 
	• Allow/block access to URLs to logged in users
	• Allow/block access to URLs to logged in users AND with certain roles
	• Handles common vulnerabilities
		○ Session fixation
		○ Clickjacking
		○ Click site request forgery
	
Spring Security is widely adopted

What Spring Security can do?
	• User name/ password authentication
	• SSO / Okta / LDAP
	• App level authorization
	• Intra app authorization like OAuth 
	• Microservice security (using tokens, JWT)
	• Method level security

5 Core Concepts in Spring Security
	• Authentication
	• Authorization
	• Principal
	• Granted Authority
	• Roles

Difference between Authentication and Authorization
Spring Security in any application in simple terms asks two questions 
	1) Who are you?
	2) What do you want?

	• WHO ARE YOU?
when asked this question user who is requesting should be able to provide a unique id ( and password ) that only he can have and any impersonator can't. This is called Authentication
	• WHAT DO YOU WANT?
	When asked this question user replies by telling what is it that he wants to access. Then spring security can check that whether he has proper authorization to access this link. This is called Authorization.

Authentication -> answering who are you with some proof.

Knowledge Based Authentication
Most web application have some representation of an ID or user account that some how uniquely corresponds to the user. So when user access the site user needs to give their ID or user name and also needs to prove that it is indeed the owner of that user name or ID. A common way it is done is by using passwords / pin code/ answer to secret / personal question. This type of Authentication is called Knowledge based authentication.

Possession Based Authentication
This is when an app sends user a text message via mail or SMS or any other way. Where you must enter the data you received. 
	• Phone / text messages.
	• Key cards and badges
	• Access token device
The idea is only the real user can be in possession of this card or phone or email so that only authentication user can access the website even if the password is leaked.

Multi Factor Authentication
Combination of Knowledge based authentication and Possession based authentication is called Multi Factor authentication. A good example would be google sign in.

Authorization -> answering what do you want And getting a simple yes or no response.
Authorization
This is security examining what does the user want and checking whether he is allowed to do it. A yes/no operation. Before Authorization any web app needs authentication. 

So both in a nut shell are -

Authentication
Who is this user?

Authorization
Are they allowed to do this?

Principal
Once the user is authenticated with any application. The application establishes the principal and it remembers it. This is why user needs to authenticate only once and doesn't need to authenticate on every request and on every different page. So app remembers the currently logged in user.
So in simple terms Principal is currently logged in user.

Granted Authority
The developer or the owner should have specified before hand the roles or who can access what in their application. So it's a bunch of permissions that is allowed for a given user. In spring security this concept of permission is called Granted Authority.

Spring Security Default Behaviour
	• Adds mandatory authentication for every URLs
	• Adds a login form
	• Handles any login error (perform validation)
	• Creates a user and sets a default password. ( default user name is always "user" and in console you can see the generated user password that would be long and crypted" )
	• Provides a default logout page when entered localhost:8080/logout this will ask user if they are sure they want to logout and if they are they can just login again with different role.

Customize user id and password
	• This can be done by entering following in the application.properties file
	•  spring.security.user.name=foo
	•  spring.security.user.password=foo

Configure Authentication in Spring Security
Configuring USERS by hard coding a couple of users and saving it in memory.

AuthenticationManager
	• This manages authentication in spring security applications
	• So it is basically has a method called authenticate() which returns a successful authentication or it throws an exception when the user is not authenticated.
	• We basically configure AuthenticationManager using a builder pattern
	• We work with a builder class called AuthenticationManagerBuilder to configure what the authentication should actually do

WebSecurityConfigurerAdapter class
This is the class that has the method configure which we have to override in order to implement in memory user id and passwords. This methods has AuthenticationManagerBuilder as an argument and we can use this object to use in memory authentication.



Password Encoding
Use PasswordEncoder class to encode the password and store the encrypted password in memory instead of the real password.
Here just for simplicity I used: 



Configuring Authorization in Spring Security
Using different APIs having different access requirements to enable Authorization.
API	 Roles allowed to access it
  /	 All (unauthenticated)
 /user 	 USER and ADMIN roles
 /admin 	 ADMIN role

HTTP Security
Using object of type HTTP security lets us configure what are the paths and what are the access restrictions for those paths. We use the class WebSecurityConfigurerAdapter and override the method called configure() with HttpSecurity as an argument and this is where we provide all the information regarding the API and the roles that can access them.



